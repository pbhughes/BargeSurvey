@model BargeSurvey.Models.BargeSample

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    ViewBag.Title = "Add Barge Sample";

    <div class="form-horizontal">
        <h4>BargeSample</h4>
        @Html.ValidationSummary(true)

        <div class="form-group">
            @Html.LabelFor(model => model.BargeID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BargeID, new { htmlAttributes = new { @class = "form-control", style = "text-transform:uppercase" } })
                @Html.ValidationMessageFor(model => model.BargeID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RiverCondition, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.RiverCondition, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.RiverCondition, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BargeType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.BargeType, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BargeType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LoadedPrior, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.FlipSwitchFor(model => model.LoadedPrior)
                @Html.ValidationMessageFor(model => model.LoadedPrior, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PumpedAfterLight, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.FlipSwitchFor(model => model.PumpedAfterLight);
                @Html.ValidationMessageFor(model => model.PumpedAfterLight, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="ui-grid-b">
            @*Draft*@
            @if (Model != null)
            {
                foreach (var item in Model.Drafts.Where(d => d.DraftType == BargeSurvey.Models.DraftType.Light))
                {
                    <div class="ui-block-a">
                        @*Light*@

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingP1, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingP1, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingP1, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingP2, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingP2, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingP2, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingP3, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingP3, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingP3, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingP4, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingP4, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingP4, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingS1, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingS1, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingS1, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingS2, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingS2, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingS2, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingS3, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingS3, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingS3, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingS4, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingS4, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingS4, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                }

                foreach (var item in Model.Drafts.Where(d => d.DraftType == BargeSurvey.Models.DraftType.Heavy))
                {

                    <div class="ui-block-b">
                        @*Heavy*@
                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingP1, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingP1, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingP1, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingP2, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingP2, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingP2, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingP3, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingP3, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingP3, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingP4, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingP4, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingP4, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingS1, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingS1, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingS1, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingS2, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingS2, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingS2, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingS3, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingS3, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingS3, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => item.ReadingS4, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.ReadingS4, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => item.ReadingS4, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                }
            }
        </div>

        @Html.HiddenFor(model => model.SurveyId, new { htmlAttributes = new { @class = "form-control" } })

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" data-inline="true" data-mini="true" />
                @Html.ActionLink("Back", "Edit", "Surveys", new { Id = ViewBag.SurveyID }, htmlAttributes: new { data_role = "button", data_mini = "true", data_inline = "true" })
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}